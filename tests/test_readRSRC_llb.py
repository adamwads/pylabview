# -*- coding: utf-8 -*-

""" Test for pyLabview project, readRSRC script.

    This test extracts and then re-creates some RSRC files.
    Run it using `pytest` in project root folder.
"""

# Copyright (C) 2022 Mefistotelis <mefistotelis@gmail.com>
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.

import filecmp
import os
import sys
import pathlib
import pytest
try:
    # python 3.4+ should use builtin unittest.mock not mock package
    from unittest.mock import patch
except ImportError:
    from mock import patch

# Import the functions to be tested
from pylabview.readRSRC import main as readRSRC_main

#    os.path.join("examples", "lv14f1", "empty_libfile.llb"), -- currently fails because icon sections are re-ordered
@pytest.mark.parametrize("rsrc_inp_fn", [
    os.path.join("examples", "blank_project1_extr_from_exe_lv14f1.llb"),
])
def test_readRSRC_repack_llb(rsrc_inp_fn):
    """ Test extraction and re-creation of LLB files.

    LLB files generated by the tool are NOT the same as original on binary level. That is because
    names section generation has time dependencies (not to mention in some old versions of LV, the
    padding is often filled with random data). So instead of comparing LLBs, compare the extracted
    files from first extraction and second extraction.
    """
    rsrc_path, rsrc_filename = os.path.split(rsrc_inp_fn)
    rsrc_path = pathlib.Path(rsrc_path)
    rsrc_basename, rsrc_fileext = os.path.splitext(rsrc_filename)
    xml_fn = f"{rsrc_basename}.xml"
    if len(rsrc_path.parts) > 1:
        rsrc_out_path = os.sep.join(["test_out", *rsrc_path.parts[1:]])
    else:
        rsrc_out_path = "test_out"
    rsrc_out_fn = os.sep.join([rsrc_out_path, f"{rsrc_basename}{rsrc_fileext}"])
    single_vi_path_extr1 = os.sep.join([rsrc_out_path, f"{rsrc_basename}_extr1"])
    if not os.path.exists(single_vi_path_extr1):
        os.makedirs(single_vi_path_extr1)
    single_vi_path_extr2 = os.sep.join([rsrc_out_path, f"{rsrc_basename}_extr2"])
    if not os.path.exists(single_vi_path_extr2):
        os.makedirs(single_vi_path_extr2)
    # Extract the LLB file
    command = [os.path.join("pylabview", "readRSRC.py"), "-vv", "-x", "--keep-names", "-i", rsrc_inp_fn, "-m", os.sep.join([single_vi_path_extr1, xml_fn])]
    with patch.object(sys, 'argv', command):
        readRSRC_main()
    # Re-create the LLB file
    command = [os.path.join("pylabview", "readRSRC.py"), "-vv", "-c", "-m", os.sep.join([single_vi_path_extr1, xml_fn]), "-i", rsrc_out_fn]
    with patch.object(sys, 'argv', command):
        readRSRC_main()
    # Re-extract the LLB file
    command = [os.path.join("pylabview", "readRSRC.py"), "-vv", "-x", "--keep-names", "-i", rsrc_out_fn, "-m", os.sep.join([single_vi_path_extr2, xml_fn])]
    with patch.object(sys, 'argv', command):
        readRSRC_main()
    # Compare files from first extraction to the ones from second extraction
    dirs_cmp = filecmp.dircmp(single_vi_path_extr1, single_vi_path_extr2)
    assert len(dirs_cmp.left_only) == 0
    assert len(dirs_cmp.right_only) == 0
    assert len(dirs_cmp.funny_files) == 0
    (match, mismatch, errors) =  filecmp.cmpfiles(single_vi_path_extr1, single_vi_path_extr2, dirs_cmp.common_files, shallow=False)
    assert len(mismatch) == 0, f"Mismatched files: {mismatch}"
    assert len(errors) == 0, f"Errors in files: {errors}"
    # We should have an XML file and at least one extracted section file
    assert len(match) >= 2
